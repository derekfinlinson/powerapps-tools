const config = require('./dataverse.config.json');
const path = require('path');
const spawn = require('cross-spawn');
const WebpackEventPlugin = require('webpack-event-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const { EsbuildPlugin } = require('esbuild-loader');

module.exports = (env, argv) => {
  const webpackConfig = {
    entry: config.entries,

    output: {
      filename: '[name].js',
      library: ['{{namespace}}', '[name]'],
      path: path.resolve(__dirname, 'lib')
    },
    
    resolve: {
      extensions: ['.tsx', '.ts', '.js'],
    },
    
    module: {
      rules: [
        {
          test: /\.ts(x?)$/,
          exclude: /node_modules/,
          use: ['esbuild-loader', 'ts-loader']
        },
        {
          test: /\.js$/,
          exclude: /node_modules/,
          use: ['esbuild-loader']
        },
      ]
    },

    plugins: [
      new CleanWebpackPlugin(),
      new WebpackEventPlugin([
        {
          hook: 'afterEmit',
          callback: compilation => {
            if (compilation.errors != null && compilation.errors.length > 0) {
              return;
            } else {
              const assets = Array.from(compilation.emittedAssets || compilation.assets).map(asset => path.basename(asset));

              spawn('npm', ['run', 'deploy', '-- --files=', assets.join(',')], { cwd: process.cwd(), stdio: 'inherit' });
            }
          }
        }
      ])
    ]
  };

  config.optimization = {
    minimizer: [
      new EsbuildPlugin({
        target: 'es2020'
      })
    ]
  };

  if (argv.mode === 'development') {
    config.devtool = 'eval-source-map';
  }

  return webpackConfig;
};